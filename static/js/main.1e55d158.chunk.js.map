{"version":3,"sources":["App.js","index.js"],"names":["marked","setOptions","breaks","placeholder","App","useState","markdown","setMarkdown","className","id","value","onChange","event","target","dangerouslySetInnerHTML","__html","parse","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4QAIAA,SAAOC,WAAW,CAChBC,QAAQ,IAyBV,IAAMC,EAAW,ypCA6CFC,EAnEf,WACE,MAAgCC,mBAASF,GAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KAEA,OACE,qBAAKC,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,oDACA,sBAAKA,UAAU,iBAAf,UACE,sBAAKA,UAAU,OAAf,UACE,qBAAKA,UAAU,UAAf,oBACA,0BAAUC,GAAG,SAASC,MAAOJ,EAAUK,SAAU,SAAAC,GAAK,OAAIL,EAAYK,EAAMC,OAAOH,aAErF,sBAAKF,UAAU,QAAf,UACA,qBAAKA,UAAU,UAAf,uBACE,qBAAKC,GAAG,UAAUK,wBAAyB,CAAEC,OAAQf,SAAOgB,MAAMV,kBCjB9EW,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.1e55d158.chunk.js","sourcesContent":["import './App.scss';\nimport { useState } from 'react';\nimport { marked } from 'marked';\nimport { render } from '@testing-library/react';\nmarked.setOptions({\n  breaks: true\n});\n\nfunction App() {\n  const [markdown, setMarkdown] = useState(placeholder);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Markdown Previewer</h1>\n        <div className=\"flex-container\">\n          <div className=\"left\">\n            <div className=\"heading\">Editor</div>\n            <textarea id=\"editor\" value={markdown} onChange={event => setMarkdown(event.target.value)} />\n          </div>\n          <div className=\"right\">\n          <div className=\"heading\">Previewer</div>\n            <div id=\"preview\" dangerouslySetInnerHTML={{ __html: marked.parse(markdown) }}></div>\n          </div>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nconst placeholder = `# Welcome to my React Markdown Previewer!\n\n## This is a sub-heading...\n### And here's some other cool stuff:\n\nHeres some code, \\`<div></div>\\`, between 2 backticks.\n\n\\`\\`\\`\n// this is multi-line code:\n\nfunction anotherExample(firstLine, lastLine) {\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\n    return multiLineCode;\n  }\n}\n\\`\\`\\`\n\nYou can also make text **bold**... whoa!\nOr _italic_.\nOr... wait for it... **_both!_**\nAnd feel free to go crazy ~~crossing stuff out~~.\n\nThere's also [links](https://www.freecodecamp.org), and\n> Block Quotes!\n\nAnd if you want to get really crazy, even tables:\n\nWild Header | Crazy Header | Another Header?\n------------ | ------------- | -------------\nYour content can | be here, and it | can be here....\nAnd here. | Okay. | I think we get it.\n\n- And of course there are lists.\n  - Some are bulleted.\n     - With different indentation levels.\n        - That look like this.\n\n\n1. And there are numbered lists too.\n1. Use just 1s if you want!\n1. And last but not least, let's not forget embedded images:\n\n![freeCodeCamp Logo](https://cdn.freecodecamp.org/testable-projects-fcc/images/fcc_secondary.svg)\n`;\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}